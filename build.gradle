
plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
}


group = 'hive.ivangeevo'
version = '0.0.1-alpha'

java {
    archivesBaseName = 'mindsigner'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.18.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'mindsigner'

            mods {
                mindsigner {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'mindsigner'

            mods {
                mindsigner {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'mindsigner'

            mods {
                mindsigner {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'mindsigner', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                mindsigner {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you
    mavenCentral()
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    implementation 'org.glassfish.tyrus:tyrus-project:2.1.3'
    implementation 'com.github.sergeybudnik:GeoDecoder:1.1.0'
    implementation 'org.glassfish.tyrus:tyrus-container-grizzly-server:2.1.3'

    minecraft 'net.minecraftforge:forge:1.18.2-40.2.2'

    implementation 'io.netty:netty-all:4.1.92.Final'
    implementation 'org.glassfish.tyrus:tyrus-core:2.1.3'
    implementation 'org.glassfish.tyrus.bundles:tyrus-standalone-client-jdk:2.1.3'
    implementation 'org.glassfish.tyrus.bundles:tyrus-standalone-client:2.1.3'
    implementation 'org.glassfish.tyrus:tyrus-client:2.1.3'
    implementation 'org.apache.tomcat.embed:tomcat-embed-websocket:11.0.0-M4'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.4'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.12.4'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.glassfish.tyrus:tyrus-container-grizzly-client:2.1.3'
    implementation 'org.glassfish.tyrus:tyrus-server:2.1.3'
    implementation 'jakarta.websocket:jakarta.websocket-all:2.1.0'
    implementation 'javax.websocket:javax.websocket-api:1.1'
    implementation 'jakarta.websocket:jakarta.websocket-api:2.0.1'

    // Choose either Jakarta EE or Java EE dependencies
    implementation 'jakarta.security.enterprise:jakarta.security.enterprise-api:3.0.0'
    //implementation 'org.jboss.spec.javax.websocket:jboss-websocket-api_1.1_spec:2.0.0.Final'

    // Choose either Jersey or Spring dependencies
    implementation 'org.glassfish.jersey.core:jersey-server:3.1.1'
    //implementation 'org.springframework.boot:spring-boot-configuration-metadata:3.0.4'

    // Move test dependency to implementation if not needed for testing
    //testImplementation 'com.nb6868.onex:coder:3.7.44'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.10.1'

    implementation 'javax.ws.rs:javax.ws.rs-api:2.1'

    // https://mvnrepository.com/artifact/jakarta.enterprise/jakarta.enterprise.cdi-api
    compileOnly 'jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1'

// https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'


}

task runWebSocket(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    executable = 'hive.ivangeevo.mindsigner.Mindsigner'
    args '--add-exports=java.base/sun.security.x509=io.netty.all'
}



// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title": "mindsigner",
                //"Specification-Vendor": "mindsigner authors",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                //"Implementation-Vendor": "mindsigner authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
